image: python:3.7.16

variables:
  CI_IMG: "\"${CI_REGISTRY_IMAGE}:latest\""
  TP_URL: "${CI_PROJECT_NAMESPACE}.bham.team"
  TP_CONTACT: "${GITLAB_USER_EMAIL}"
cache:
  key: '$CI_COMMIT_REF_NAME'
stages:
  - check
  - test
  - publish
  - deploy

prerequisities:
  image: python:3.7.16
  stage: check

  script:
    - pip install -r requirements.txt
    - python mySite/mysite/manage.py check


django-test:
  image: python:3.7.16
  stage: test

  script:
    - pip install -r requirements.txt
    - python mySite/mysite/manage.py test

publish-docker:
  image: docker:stable
  stage: publish
  
  services:
    - docker:dind
  variables:
    DOCKER_HOST: 'tcp://docker:2375'
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  script:
    - echo "pushing ${CI_REGISTRY_IMAGE} ${CI_REGISTRY_USER} ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t ${CI_REGISTRY_IMAGE}:tpdjango mySite/
    - docker push ${CI_REGISTRY_IMAGE}:tpdjango
    - docker build -t ${CI_REGISTRY_IMAGE}:tpnginx nginx/
    - docker push ${CI_REGISTRY_IMAGE}:tpnginx
#uncomment this once the $RSA $VM_USER@$VM are set in the repo - Setting -> CI/CD -> variables
#$RSA should be a private key file, $VM_USER is the VM user name (e.g. root or ec2) and $VM is the IP address of the Virtual Machine
#this assumes docker and SSH is installed on the $VM

# deploy-git:
#   image: alpine:latest
#   stage: deploy
#   when: on_success
#   before_script:
    
#     - chmod og= $RSA
#     - apk update && apk add openssh-client
#     # - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker network rm tpnetwork || true"
#     - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker stop tpdjango || true"
#     - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker stop tpnginx || true"
#     - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker rm tpdjango || true"
#     - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker rm tpnginx || true"
#     - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "rm -rf ~/team-project-deployment || true"
#     - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker container ls -a"
#     - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
#     - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker pull ${CI_REGISTRY_IMAGE}:tpdjango"
#     - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker pull ${CI_REGISTRY_IMAGE}:tpnginx"
#   script:
#     - scp -o StrictHostKeyChecking=no -i $RSA -r . $VM_USER@$VM:~/team-project-deployment
#     - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker network rm tpnetwork || true"
#     - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker network create tpnetwork"
#     - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker run -d -p 8000:8000 --name tpdjango --network tpnetwork --network-alias tpdjango ${CI_REGISTRY_IMAGE}:tpdjango"
#     - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker run -d -p 80:80 --name tpnginx --network tpnetwork --network-alias tpnginx ${CI_REGISTRY_IMAGE}:tpnginx"

deploy-git:
  image: alpine:latest
  stage: deploy
  when: on_success
  before_script:

    - chmod og= $RSA
    - apk update && apk add openssh-client
    # - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker network rm tpnetwork || true"
    # - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker stop tpdjango || true"
    # - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker stop tpnginx || true"
    # - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker rm tpdjango || true"
    # - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker rm tpnginx || true"
    - ssh -i $RSA $VM_USER@$VM "docker compose -f ~/team-project-deployment/docker-compose.yml down || true"
    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "rm -rf ~/team-project-deployment || true"
    # - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker container ls -a"
    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker pull ${CI_REGISTRY_IMAGE}:tpdjango"
    # - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker pull ${CI_REGISTRY_IMAGE}:tpnginx"
  script:
    - scp -i $RSA -P $VM_PORT -r . $VM_USER@$VM:~/team-project-deployment
    - ssh -i $RSA $VM_USER@$VM "docker compose -f ~/team-project-deployment/docker-compose.yml up -d"
    # - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker network rm tpnetwork || true"
    # - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker network create tpnetwork"
    # - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker run -d -p 8000:8000 --name tpdjango --network tpnetwork --network-alias tpdjango ${CI_REGISTRY_IMAGE}:tpdjango"
    # - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker run -d -p 80:80 --name tpnginx --network tpnetwork --network-alias tpnginx ${CI_REGISTRY_IMAGE}:tpnginx"